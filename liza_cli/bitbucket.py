import json


from dataclasses import dataclass
from typing import Dict, Optional, Iterator


@dataclass
class BitBucket:
    username: str
    token: str
    user_uuid: Optional[str]
    endpoint = "https://api.bitbucket.org/2.0"

    def _get(self, path: str, params: Dict = None):
        # Strip the base endpoint if included. This is helpful when using URLs
        # generated by the BitBucket API in pagination.
        path = path[path.startswith(self.endpoint) and len(self.endpoint) :]

        import httpx

        return httpx.get(
            f"{self.endpoint}{path}",
            auth=(self.username, self.token),
            params=params or {},
        )

    def get_user(self) -> Optional[Dict]:
        response = self._get("/user")

        if response.status_code != 200:
            return None

        return json.loads(response.content)

    def get_repository(self, name: str) -> Dict:
        """
        :param name:  The full repository name, including the organization. E.g. "camuthig/test_repo"
        :return:
        """
        response = self._get(f"/repositories/{name}")

        return json.loads(response.content)

    def get_assigned_and_authored_pull_requests(self, name: str) -> Iterator[Dict]:
        """
        :param name:  The full repository name, including the organization. E.g. "camuthig/test_repo"
        :return:
        """
        url = f"/repositories/{name}/pullrequests"
        params = {
            "pagelen": 25,
            "q": f'state="OPEN" AND (author.uuid="{self.user_uuid}" OR reviewers.uuid="{self.user_uuid}")',
            "state": "OPEN",
        }

        while url is not None:
            response = self._get(url, params=params)

            data = json.loads(response.content)

            yield from data["values"]

            url = data.get("next", None)

    def get_pull_request_activity(self, name: str, id: int) -> Iterator[Dict]:
        """
        :param name:  The full repository name, including the organization. E.g. "camuthig/test_repo"
        :param id: The ID of the pull request in the repository
        :return:
        """
        url = f"/repositories/{name}/pullrequests/{id}/activity"
        while url is not None:
            response = self._get(url, params={"pagelen": 50})

            data = json.loads(response.content)

            yield from data["values"]

            url = data.get("next", None)
